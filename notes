*Storting 
    * in-place sort     
    * not in-place sort ( sort in another array)


1- Bubble Sort 
    * Loop in all cases => loop(loop) => n2
    * Improve algo for best case => loop(loop) => n
    * Space Complexity => O (1)
    * In-Place
    * Stable

--------------------------------------------------------------------------------------

2- Selection Sort
    * select the smallest num and set it in first 
    * Loop in all cases => loop(loop) => n2
    * Space Complexity => O (1)
    * In-Place
    * Stable

--------------------------------------------------------------------------------------

3- Insertion Sort
    * select the smallest num and set it in first 
    * Loop in all cases => loop(loop) => n2
    * Space Complexity => O (1)
    * In-Place
    * Stable


--------------------------------------------------------------------------------------

4- Recurrence   vs Iteration

    - Recurrence
        * Simplicity
        * Readability

        # Performance => less efficient due to the overhead of multiple function calls increased memory usage and slower performance.
        # Stack Overflow

    - Iteration
        * Efficiency => use less memory, avoid the overhead of multiple function calls
        
        # Complexity => less efficient due to the overhead of multiple function calls increased memory usage and slower performance.
        # Readability


--------------------------------------------------------------------------------------

5- Stack  => Linear data structure  :   Last in first out (LIFO) 

    Main operations :

        * Push    : Adds an element to the top of the stack.
        * Pop     : Removes and returns the top element from the stack.
        * Top     : Returns the top element of the stack without removing it.
        * isEmpty : Checks if the stack is empty.
        * Size    : Returns the number of elements in the stack.

    Usage : 
        * Function Call Management
        * Undo/Redo Operations
        * Browser History 
       

--------------------------------------------------------------------------------------
